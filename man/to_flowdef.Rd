% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/to-flowdef.R
\name{to_flowdef}
\alias{as.flowdef}
\alias{is.flowdef}
\alias{to_flowdef}
\alias{to_flowdef.character}
\alias{to_flowdef.flow}
\alias{to_flowdef.flowmat}
\title{Create a skeleton flow definition using a flowmat.}
\usage{
to_flowdef(x, ...)

\method{to_flowdef}{flowmat}(x, sub_type, dep_type, prev_jobs,
  queue = "short", platform = "torque", memory_reserved = "2000",
  cpu_reserved = "1", walltime = "1:00", verbose = get_opts("verbose"),
  ...)

\method{to_flowdef}{flow}(x, ...)

\method{to_flowdef}{character}(x, ...)

as.flowdef(x, ...)

is.flowdef(x)
}
\arguments{
\item{x}{can a path to a flowmat, flomat or flow object.}

\item{...}{not used}

\item{sub_type}{submission type, one of: scatter, serial. Character, of length one or same as the number of jobnames}

\item{dep_type}{dependency type, one of: gather, serial or burst. Character, of length one or same as the number of jobnames}

\item{prev_jobs}{previous job name}

\item{queue}{Cluster queue to be used}

\item{platform}{platform of the cluster: lsf, sge, moab, torque, slurm etc.}

\item{memory_reserved}{amount of memory required.}

\item{cpu_reserved}{number of cpu's required}

\item{walltime}{amount of walltime required}

\item{verbose}{be chatty ? This is numeric with values 0, 1, 2.}
}
\description{
This function enables creation of a skeleton flow definition with several default values, using a
flowmat.
To customize the flowdef, one may supply parameters such as sub_type and dep_type upfront.
As such, these params must be of the same length as number of unique jobs using in the flowmat.
}
\details{
When using \code{as.flowdef(flowdef, verbose = 2)}, you may expect the following
output, which described all the checks performed on the flow definition file.

\preformatted{

	 checking if required columns are present...
	 checking if resources columns are present...
	 checking if dependency column has valid names...
	 checking if submission column has valid names...
	 checking for missing rows in def...
	 checking for extra rows in def...
	 checking submission and dependency types...
	 jobname prev.sub_type --> dep_type --> sub_type: relationship
	 1: aln1 none --> none --> scatter
	 2: aln2 scatter --> none --> scatter
	 3: sampe        scatter --> serial --> scatter rel: complex one:one
	 4: fixrg        scatter --> serial --> scatter rel: complex one:one
	 5: merge        scatter --> gather --> serial rel: many:one
	 6: markdup      serial --> serial --> serial rel: simple one:one
	 7: target       serial --> serial --> serial rel: simple one:one
	 8: realign      serial --> burst --> scatter rel: one:many
	 9: baserecalib  scatter --> serial --> scatter rel: complex one:one
	 10: printreads  scatter --> serial --> scatter rel: complex one:one
	 11: haplotyper  scatter --> serial --> scatter rel: complex one:one
}
}

