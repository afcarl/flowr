% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/status.R
\name{status}
\alias{get_status}
\alias{get_status.character}
\alias{get_status.data.frame}
\alias{get_status.flow}
\alias{status}
\title{status}
\usage{
status(x, use_cache = TRUE, verbose = get_opts("verbose"),
  out_format = "markdown")

get_status(x, ...)

\method{get_status}{flow}(x, verbose, use_cache, out_format, ...)

\method{get_status}{character}(x, verbose, use_cache, out_format, ...)

\method{get_status}{data.frame}(x, verbose, use_cache, ...)
}
\arguments{
\item{x}{path to the flow root folder or a parent folder to summarize several flows.}

\item{use_cache}{by default is true. This skips checking status of jobs which have already been created.
To get a more accurate summary, one may turn this off.}

\item{out_format}{passed onto knitr:::kable. supports: markdown, rst, html...}

\item{...}{not used}
}
\description{
Summarize status of executed flow(x)
}
\details{
basename(x) is used in a wild card search.

\itemize{
\item If x is a path with a single flow, it outputs the status of one flow.
\item If the path has more than one flow then this could give a summary of **all** of them.
\item Instead if x is supplied with paths to more than one flow, then this individually prints status of each.
}

Alternatively, x can also be a flow object.

Use \strong{use_cache} is to speed up checking status of jobs which have already been completed.
Essentially this skips creation of a flow details text file if it already exists
and also skips reading the trigger files for jobs whose exit code was 0, last time this was checked.
}
\examples{
\dontrun{
status(x = "~/flowr/runs/sleep_pipe*")
## an example for running from terminal
flowr status x=path_to_flow_directory
}
}

