#!/usr/bin/env Rscript
## A class that contains bam file information
## Copyright 2014, Sahil Seth
## licence: MIT
## sahil.seth@me.com
## A few functions to supplement those already in this package.
## URL: github.com/sahilseth/rfun
## URL: docs.flowr.space
#### -----------------------

## -------- incase of issues switch on verbose to see what is going on !
verbose = FALSE
nm = "flowr"

get_params <- function(func, paramPairs, verbose = FALSE){
	#func <- as.character(paramPairs[1])
	#if(length(func) == 0) return(help())

	args <- formals(func)
	paramPairs <- paramPairs[grep("=", paramPairs)] ## get those with =

	if(verbose){message("args:");print(args)}
	
	#print("paramPairs:");print(paramPairs)
	#args_supplied = sapply(strsplit(paramPairs, "="), "[[", 1)


	if(verbose) 
		message("\nget_params: we have ", 
						length(paramPairs), " parameters\n",
						paste(paramPairs, collapse = "\n"))
	
	for(param in paramPairs){
		if(verbose)
			message("\nstarting process with: ", param)
		
		splt <- unlist(strsplit(param, "="));
		nm = splt[1]
		value = splt[2]
		value <- strsplit(value,",")[[1]] #handling those with , in value.. for multiple R values

		## --- if function supports ... need to pass ALL arguments
		if(sum( names(args) %in% "...") & !nm %in% names(args) ){
			## -- remove the dots argument
			if(verbose)
				message("Adding ", nm, ":", value)
			l = list(nm = value);names(l) = nm
			args <- c(args, l)
		}
		
# 		if(verbose)
# 			message("processing param: ", nm, " value ", args[[nm]])
		
		if(class(args[[nm]]) == "numeric" ){
			args[[nm]] = as.numeric(value)
		}else if(class(args[[nm]]) %in% c("logical") | (value[1] %in% c("TRUE", "FALSE") & length(value) == 1)){
			args[[nm]] = as.logical(value)
		}else if(class(args[[nm]]) %in% c("character", "name" )){
			args[[nm]] = as.character(value)
		}else if(class(args[[nm]]) %in% c("list")){
			args[[nm]] = as.list(value)
		}else if(class(args[[nm]]) %in% c("call")){ ## example call to getOption
			args[[nm]] = as.character(value)
		}
		if(verbose)
			message("processed param: ", nm, " value ", args[[nm]])
	}
	
	## remove dots
	dots = which( names(args) == "..." )
	if(length(dots) > 0 )
		args = args[-dots]
	
	## check values if NULL, remove.
	rm = which(sapply(args, is.name))
	if(length(rm) > 0)
		args = args[-rm]

	##print(do.call(rbind, as.list(args)))
	if(verbose) print(args)
	return(as.list(args))
	
}


flow_help <- function(){
	cmds <- matrix(c(
		'status',       'Detailed status of a flow(s).',
		'rerun',        'rerun a previously failed flow',
		'kill',         'Kill the flow, upon providing working directory',
		"fetch_pipes",  "Checking what modules and pipelines are available; flowr fetch_pipes"
#		'run',          'Running predefined pipelines; EXPERIMENTAL'
	), byrow=T, ncol=2)
	#cat("\nShowing a subset of functions, but all flowr functions can be accessed.")
	cat(sprintf("\n  %-15s %s", cmds[,1], cmds[,2]), sep="")
}

generic_help <- function(){
	cat(sprintf("\nUsage: %s function [arguments]\n", nm))
	#cat("\nFunctions where the arguments are simple objects like numeric/character/logical can be called.",
	#		"\nLists become a little more complicated. say x=a,b is converted to a list with elements a,b\n",
	#		"\nSome examples:")
	#}else{
	#cat("\n## Fetch some numbers:\nrfun rnorm n=100",
	#			"\n## Fetch files from pacakges:",
	#		"\nrmd=$(rfun system.file package=knitr ...=examples/knitr-minimal.Rmd)",
	#		"\necho $rmd",
	#		"\n## knit this awesome example !",
	#		"\nrfun knitr::knit input=$rmd\n")
	#}
	if(nm == "flowr")
		flow_help()
	cat(sprintf("\n\nPlease use '%s -h function' to obtain further information about the usage.\n", nm))
}


main <- function(args){
	#args <- commandArgs(trailingOnly = TRUE)

	##-------- if default function is not in the space, load flowr library
	if(nm == "flowr")
		require(flowr, quietly=!verbose, warn.conflicts=verbose)
	
	if(missing(args))
		return(generic_help())
		
	
	## args which start with - are for flowr script
	rm = grep("^-", args)
	flowargs = args[rm]
	
	if("-v" %in% flowargs)
		verbose = TRUE
	
	if(verbose){
		message("args:"); print(args)
		message("flowargs:"); print(flowargs)
		message("Using ", flowargs, " as arguments for flowr")
	}
	
	if(length(rm) > 0)
		args = args[-rm]
	func = args[1]
	args = args[-1]
	
	if(verbose){
		message("\nusing func:");
		print(func)
		message("with final args:");
		print(args)
	}


	## -------------- Load the required package
	if(grepl("::", func)){
		pkg <- gsub("(.?)::.*", "\\1", func)
		cat("loading pkg:", pkg, "\n");
		library(pkg, character.only = TRUE)
		func = as.character(gsub(".*::(.*)", "\\1", func))
	}

	if( is.na(func) ){
		generic_help()
		invisible()
	}
	
	fn = try(get(func))
	if(class(try(fn)) == "try-error")
		stop("\n\nwe would not find a function by this name, please check: ", func)
	
	if(is.function(fn) & "-h" %in% flowargs){
		return(help(func))
		
	}else{
			
		params <- get_params(func = func, paramPairs = args, verbose = verbose)
		if(verbose){
			cat("\nStarting", func, "with params\n",
				paste(names(params), unlist(params),sep=": ",
					collapse="\n"),"\n")
			#print(args)
			if(verbose) print(str(params))
		}
		#cat("Calling:", args[1])
		if(length(args) == 0)
			message("\ntry:      flowr -h ", func, "     to get more details on this function.")
		try(do.call(func, args = params))
		#return(out)
	}
	
}

## --- showing the output of the returned..
render_out <- function(out){
	
	if(is.data.frame(out)){
		message("Showing the first 100 rows of the data.frame")
		try(knitr:::kable(head(out, 100)), silent = TRUE)
		
	}else if(class(out) == "help_files_with_topic"){
		## print help files
		print(out)
		
	}else if(is.null(out)){
		## skip NULL
		cat("")
		
	}else if(is.list(out)){
		## print list
		print(out)
		
	}else if(is.atomic(out)){
		print(cat(out, "\n"))
		
	}else if(is.function(out)){
		print(out)
	
	}else{
		cat("")
	}
}


main(commandArgs(trailingOnly = TRUE))

#render_out(out)





if(FALSE){
	## tests
	paramPairs=c('bwa', 'fqs1=sample1.fq', 'bwa_index=index', 'bwa_samse_opts=myopts')
	debug(get_params)
	get_params(paramPairs)
	
	
	library(testthat)
	
	out = main("rnorm")
	expect_is(out, "help_files_with_topic")
	
	out = main("rnorm -h")
	expect_is(out, "help_files_with_topic")

	out = main(c("rnorm", "n=100"))
	expect_equal(length(out), 100)
	
	## rerun example:
	paramPairs=c('x=fastq_mutect-C835.HCC1143.2___C835.HCC1143_BL.4-20150905-22-31-28-5AG8iPdH', 'start_from=mutect', 'kill=FALSE')

}


ex = "
## all examples
flowr
flowr -h
flowr -h fetch_pipes
flowr fetch_pipes

"


if(verbose) warnings()
